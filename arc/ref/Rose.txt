Rose
~~~

Language grammar in rose.sablecc
Sable.cc generates the parser and AST code.
translate.cpp loads the Rose program then
    - Check there is at least one proc
    - Get the form
    - Traverse the AST with a stats pass
    - Interpret the AST to derive plots per frame
    - Traverse the AST to get the colour script
    - Call code generator to parse the AST to generate byte code and list of constants

constants.bin - just an array of 32-bit constants, sorted by value.
colorscript.bin - not looked at yet but looks like a sequence of frame delta values and RGB+index values (all 16-bit shorts)
    Top bit of 16-bit short is set if value is a delta for number of frames (or 0x8000 for end)
    Otherwise shorts are iiiiRRRRGGGGBBBB, where iiii is Tint [0-15]  
bytecodes.bin - see bytecode.h for details

Byte codes are JIT'd in Engine.S to 68000 instructions.
Everything is stack based.
Most instructions just push value onto the stack or pop them off.
Each turtle state contains its own stack
See RoseSpace.S for state layout:
    - Proc address
    - X
    - Y
    - Size
    - Tint (colour index)
    - Rand seed
    - Dir (brad)
    - Time

List of free turtle states held in a linked list under r_FreeState
with the first word of each pointing to next free state.

r_StateLists holds a linked list of active turtles for frame N.
When a turtle does a wait command it:
    - Adds wait value to its current time
    - Gets address of local "continue" label
    - Stores "continue" as proc address
    - Push state base ptr onto state stack
    - Calculates the address of r_StateLists[state.time]
    - Pushes current value of r_StateLists[state.time] onto state stack.
    - Stores state stack ptr in r_StateLists[state.time]

RunFrame called once per frame:
    - Calculate address of r_StateLists[frame_no]
    - If r_StateLists[frame_no] == 0 then done
    - Copy r_StateLists[frame_no] to state stack ptr
    - Pop stack to r_StateLists[frame_no]
    - Pop stack to state base ptr
    - Load state.proc address
    - Jump to proc address

InitStates:
    - Calculate base address of r_StateSpace into state ptr
    - Loop for MAX_TURTLES-1
        - Calculate end of state block = state ptr + STATE_SIZE
        - Store state ptr at end of state block
        - State ptr = end ptr
    - Creates a linked list with first word of each state block pointing to the start of the previous one

InitMainTurtle:
    - Store contents of state ptr in r_FreeState (ptr to next free state)
    - Store r_Instructions (proc 0) at state_ptr (state.proc_address)
    - Set random seed
    - Use state ptr as state stack ptr
    - Push value of state ptr onto state stack
    - Push contents of r_StateLists[0] onto state stack
    - Store state stack ptr at r_StateLists[0]

So state stack grows downwards beneath state block.
This is why r_StateSpace has MAX_TURTLES+1 allocated.
Although that doesn't necessarily help and could corrupt array before?
Never uses state 0. (Probably never get to MAX_TURTLES)

r_State
{
    void *st_proc               ; 4
    int st_x                    ; 8
    int st_y                    ; 12    
    int st_size                 ; 16
    int st_tint                 ; 20
    int st_rand                 ; 24
    int st_dir                  ; 28
    int st_time                 ; 32
    int wires[WIRE_CAPACITY]    ; 64
    int stack[MAX_STACK+2]      ; 152   ; +2 because always need to push two pointers for statelist management.
}

rState r_StateSpace[MAX_TURTLES+1]

InitStates:
r_stateSpace[n+1] = &r_StateSpace[n]    ; linked list.

TODO:
- Revisit all bytecode commands now that Engine.S has been annotated.
    - Const - DONE APART FROM USEBIGCONSTANT
    - Done - DONE
    - Else - DONE
    - End - NEED FreeState FN.
    - Rand - ASSUME USERANDOM=0 FOR NOW
    - Draw - NEED PutCircle FN!
    - Tail - DONE
    - Plot - NEED PutSquare FN!
    - Proc - DONE
    - Pop - DONE?
    - Div - NEED DIV FN.
    - Wait - NEED WaitState FN.
    - Sine - NEED MakeSinus FN.
    - Seed - TODO
    - Neg - DONE
    - Move - NEED DoMove FN.
    - Mul - DONE
    - When - DONE?
    - Fork - Need ForkState FN.
    - Op - NOT SURE!
    - WLocal - DONE
    - WState - DONE
    - RLocal - DONE
    - RState - DONE

TODO: Check link register for all fns with branches! - DONE
TODO: Check unreachable code after fork? - DONE

- Add constants.bin to converter:
    - Swap endian. - DONE
    - Load from table. - DONE
    - Use immediate loads where possible? - DONE FOR 8 bit!

- Create initial ARM implementation of Frame and State handling from Engine.S:
    - RunFrame - DONE
    - InitStates - DONE
    - InitMainTurtle - DONE
    - FreeState - DONE
    - PutCircle - DONE?
    - PutSquare - DONE?
        - Use RiscOS circle drawing with VDU commands as placeholder!
    - WaitState - DONE
    - MakeSinus - DONE?
    - DoMove - DONE
    - ForkState - DONE

- Test!
    - circle - WORKS!
    - ball - WORKS!
    - tree - WORKS!
    - chiperia - WORKS!
    - teaser - WORKS!
    - everyway - WORKS!
    - jesuis - WORKS! ALTHOUGH CREDITS MISSING?
    - frustration - WORKS!
    - euphoria - WORKS! ALTHOUGH LAST BIT BLANK?
    - waytoorude - WORKS!
    - logicos - WORKS!
    - technova - WORKS!

TODO:
    - Incorrect push on StateStack after ELSE in tree.asm - DONE
    - CHECK: Sign extend on division? - DONE
    - CHECK: Random number generator vs. Visualiser. - DONE
    - CHECK: Status flags for all OPS? - DONE.
    - Optimise redundant 'movs r0, r0' for WHEN without OP case only. - DONE
    - Need more debug:
        - Display frame no., number of turtles etc - DONE
        - Frame rate, number of circles etc - DONE
        - Stop on frame no. - DONE
        - Single step frames after stop. - DONE
        - Play/pause frames. - DONE
        - Restart. - JUST QUIT?
    - Send everyway.asm test case to Frank at vasm. - DONE
    - BUG: Sign extend sine lookup. - No, actually already done with RSB.
    - MISSING: Lookup with BIGCONSTANT. - DONE?

- Implement colorscript.bin, LOOK, PLAN etc. - DONE

- Write more optimal Circle & Square plotting fn. - DONE
    - Ask Sarah for her routines from Horizon? - RECEIVED \o/

- Add QTM Player for MOD. - DONE
- Win, i.e. send to Hoffman. :) - DONE


Looks like Service_ModeExtension is your friend
you identify your magic mode number, then return a VIDC list specifying MODE 9 as the base mode and then new register values for the display start and end registers
oh, and you'll need to indicate ScreenSize has changed if you want double buffering to work
http://www.riscos.com/support/developers/prm/vdu.html#90282

https://pdjstone.github.io/arculator-wasm/arculator.html?disc=https://bitshifters.github.io/content/wip/arc-rose.adf&autoboot=desktop%20filer_run%20adfs::0.$.!Rose


20/9/22 TODO
- Sort plots per frame from top to bottom. - DONE.
- Add raster time debug for turles vs plots. - DONE.
- Make custom screen mode for Archie: 352x280x16. - HACKY VERSION DONE (DIRECT VIDC WRITE)!
- Fix incorrect wobbly lines in Painters*. - DONE!
- Check small circle sizes vs Amiga implementation. - DONE, JUST SIZE 1?
    |- size <expression>
    |  Set pen radius in pixels (rounded to nearest integer-and-a-half).

- Tidy up folder structure. - DONE
- Setup a Makefile to make all the Rose apps as different targets etc. - DONE
- Contact steve3000 about the latest standalone version of QTM. - DONE, HAVE v1.47a
- Hoffman reports there is an audio sync drift during Everyway?
    - Is this an online Arculator problem, the Rose engine or QTM?
    - Add debug to count dropped frames. - DONE
    - Trial scheme to catch up dropped frames? - TRIED, LOOKS TERRIBLE :(
- Way Too Rude - need second bitplane! - DONE!
- QTM sample offset bug - FIXED WITH NEW VERSION OF QTM v1.47a!
    - Way Too Rude 'Wuaaa, uh uh' vocal.
- Make MOD playback Mono. - DONE
- Nicer overscan MODE module, if cba. - GOT STEVE'S CODE.
    - Use Steve's MODE98 module. - DONE
- Accomodate underscanned modes 320x180 properly. - DONE
    - Centre this and make equivalent to wait for vsync for max raster time.
    - Added MODE97 made by Steve's MMode.

30/9/22 TODO
- Figure out vlink for different sections (jetison BSS segment)
- Tidy up code generally, esp. engine.asm e.g. split out span plot code gen into lib.
- Remove all redundant code & data to reduce exe sizes.
    - Way Too Rude requires 4mb! Everything else runs in 2Mb.- DONE
    - Should only need span routines up to ~140 pixels (MAX_RADIUS=70)
- Add LZ4 or Shrinker compression to final exe. - DONE

- Move MOD into the exe, rather than being a separate file? - DONE
- Add ability to delay animation start by N frames for sync (IP says 2!)
    - Added one frame for music to start before animation commences.

- Optimisations...
    - Look for optimisations, register use etc.
    - Dual Playfield demos drop frames on 8MHz machines. :(
    - Look for potential optimisations on circle drawing generally.
    - Are there any optimisations for the DPF implementation?
        - Potential option for writing to each PF as separate buffers then doing
          an unrolled merge to a final screen? Presume the cost of all the extra
          reads & write for every pixel will massively outweight doing it inline.
    - Look for optimisations in the Rose bytecode assembly.
        - Load constants directly where can be made from 8 or 16-bit rotations.
        - Directly embed some functions rather than bl? (Check code size).
        - (Most of it is just load value, push/pop to stack.)
        - I guess this is getting into the realms of language register allocation...
    - Could generate a reciprocal table at init if divide is expensive (and could inline).

- Get correct frame lengths so demos all finish as expected.
- Clock speed check at runtime to set Sample Quality appropriately?

NICE TO HAVE:
- General circledat table?
- Write an ARM JIT implementation..?

SUPER UNLIKELY BUT WOULD BE AWESOME:
- Potentially look at soft synths for sample generation?
    => Ask Steve or Sarah to do this!


MODE 9 VIDC defaults:
 Horizontal cycle        = 512   Vertical cycle        = 312
 Horizontal sync width   =  38   Vertical sync width   =   3
 Horizontal border start =  83   Vertical border start =  22
 Horizontal display start= 131   Vertical display start=  38
 Horizontal display end  = 451   Vertical display end  = 294
 Horizontal border end   = 499   Vertical border end   = 310
 Horizontal cursor start = 240   Vertical cursor start =  37
                                 Vertical cursor end   =  37
"Centre" of screen is 291, 166


Dual Playfield Mode
~~
Oh dear! This is going to be painful on Archie. :\

All Hoffman's demos after Everyway are 2x layers with 4 colours per layer.

|The tints are distributed over the layers, so if, for instance, there are 4
|colors per layer, tints 0-3 are in the first (backmost) layer, tints 4-7 are
|in the next layer and so on.
|
|The first tint in each layer except the first is transparent, showing the
|layers behind it. Thus, the colors for these tints are ignored.

Layer 0 is the backmost layer containing tints [0-3]
Layer 1 is the front layer containing tints [4-7]

-> Plotting in tint 0 will erase everything, i.e. tints 1-7.
-> Plotting in tint 4 will erase tints 5-7.

Only way I can see to do this, is implement the two playfields in software.
So for 4bpp, use bottom 2 bits for layer 0 and top 2 bits for layer 1.
Say each pixel: bbaa so plotting we will need to read, mask and write back. :(
Program the palette thus:

0000 = tint 0 [so tint 4 is invisible]
0001 = tint 1 [so tint 4 is invisible]
0010 = tint 2 [so tint 4 is invisible]
0011 = tint 3 [so tint 4 is invisible]
0100 = tint 5
0101 = tint 5
0110 = tint 5
0111 = tint 5 [so tint 5 in layer 1 is in front of all tints in layer 0]
1000 = tint 6
1001 = tint 6
1010 = tint 6
1011 = tint 6 [so tint 6 in layer 1 is in front of all tints in layer 0]
1100 = tint 7
1101 = tint 7
1110 = tint 7
1111 = tint 7 [so tint 7 in layer 1 is in front of all tints in layer 0]

Plotting layer 0: Mask = %00110011001100110011001100110011 = 0x33333333
Plotting layer 1: Mask = %11001100110011001100110011001100 = 0xcccccccc

layer = tint >> 2
pixel = (tint & 3) << (layer*2)

So plotting tint 4 will erase top pixel bits bb.
Exception is that plotting tint 0 needs mask 0xffffffff (i.e. erases both layers)

Standard plot: str r9, [r10], #4
Becomes:
    ldr r8, [r10]
    bic r8, r8, r7          ; r7=layer mask.
    orr r8, r8, r9          ; r9=colour word & layer mask
    str r8, [r10], #4

So over twice as slow... although first, last and same word already does this,
which will likely apply to most circles of size < 16 so might be OK?


3D size bug...

proc project px py pz 
	temp centrez = 90
	temp fl = 90
	temp scale = fl / (fl + pz + centrez)
	temp point_x = px * scale
	temp point_y = py * scale

	fork plot_xy point_x point_y pz

Can't see a problem! px=25 py=25 pz=25 at rotation 0.
scale = 90 / (90 + 25 + 90) ~= 0.44
point_x = 25 * 0.44 ~= 11
point_y = 25 * 0.44 += 11

But appears in Visualiser to be about 40, 40
point_x = 40 = 25 * scale
scale = 40 / 25 = 1.6
1.6 = 90 / (90 + pz + 90)
180 + pz = 90 / 1.6
180 + pz = 56.25 => pz = -123.75
WTF?!

Turns out that divs.w doesn't work quite as I expected..!
C implementation is:
    int divisor = b << 8 >> 16;
    int div_result = a / divisor;
    return div_result << 8;
Where the divisor will be sign extended if it overflows (128<<16)!!!
This was happening technova, so the divisor (fl + pz + centrez) become negative..!

Other Rose notes:
- Bytecode compiler does no compile time optimisations!
    - Redudant code will be executed.
    - Compiler does not calculate constants e.g. (2+3) will do the addition at runtime.
- All numbers are considered fixed point.
    - E.g. number/4 will be treated as number/4.0, so use << >> if possible.
- Don't forget numbers are fixed point, so ~1 (-1) is 0xffff0000 not 0xffffffff!

BSS Sizes:
CircleBuffer: 5600 bytes = MAXCIRCLES * 7 * 4 = 200 * 28
CircleBufPtrs: 720 bytes = Screen_Height * 4 = 180 * 4
StateSpace: 76152 bytes = MAX_TURTLES * STATE_SIZE
= 500 * (VARS + WIRES + STACK + 2) * 4
= 500 * (8 + 8 + 20 + 2) * 4 = 500 * 38 * 4 = 500 * 152 = 74K
StateLists: 56000 bytes = MAX_FRAMES * 4 = 13000 * 4
Sinus: DEGREES * 4 = 16384 * 4 = 64k
Code gen size?
Total nearly 200K

Code Sizes:
Engine code: 10364 bytes inc 1024 bytes stack.
Circle data nearly 5K. <= could be generated.
So actual code size is nearer 4K.
Way Too Rude, code size: 109236 bytes ~= 107K!
Generated span plot fns. with MAXSPAN=142: 94760 bytes ~= 93K
(MAXSPAN=320 balloons to 332828 bytes ~= 325K)

E.g. waytoorude: 340144 (exe+bss) + 94760 (gen code) + 548170 (mod) = 983074 +QTM etc.

Generic loader:
- Relocate decompression routine to top of RAM.
- Load compressed exe below this.
- Decompress to 0x8000.
- Run from 0x8000.
